{
  "tableName": "meetupRsvp",
  "tableType": "REALTIME",
  "segmentsConfig": {
    "timeColumnName": "ts",
    "retentionTimeUnit": "DAYS",
    "retentionTimeValue": "7",
    "replicasPerPartition": "1",
    "schemaName": "meetupRsvp"
  },
  "tenants": {
    "broker": "DefaultTenant",
    "server": "DefaultTenant",
    "tagOverrideConfig": {}
  },
  "tableIndexConfig": {
    "streamConfigs": {
      "streamType": "kafka",
      "stream.kafka.topic.name": "sj1_logstash_telephony_hdfs",
      "stream.kafka.broker.list": "sj1-kafka-s.webex.com:9092",
      "stream.kafka.consumer.type": "lowlevel",
      "stream.kafka.consumer.prop.auto.offset.reset": "smallest",
      "stream.kafka.consumer.factory.class.name": "org.apache.pinot.plugin.stream.kafka20.KafkaConsumerFactory",
      "stream.kafka.decoder.class.name": "org.apache.pinot.plugin.stream.kafka.KafkaJSONMessageDecoder",
      "realtime.segment.flush.threshold.rows": "0",
      "realtime.segment.flush.threshold.time": "1h",
      "realtime.segment.flush.segment.size": "100M"
    },
    "invertedIndexColumns": [],
    "noDictionaryColumns": [],
    "rangeIndexColumns": [],
    "autoGeneratedInvertedIndex": false,
    "createInvertedIndexDuringSegmentGeneration": false,
    "sortedColumn": [],
    "bloomFilterColumns": [],
    "loadMode": "MMAP",
    "onHeapDictionaryColumns": [],
    "varLengthDictionaryColumns": [],
    "enableDefaultStarTree": false,
    "enableDynamicStarTreeCreation": false,
    "aggregateMetrics": false,
    "nullHandlingEnabled": false
  },
  "metadata": {},
  "quota": {},
  "routing": {},
  "query": {},
  "ingestionConfig": {
    "filterConfig": {
      "filterFunction": "Groovy({featureName != \"FailOnJoinSession\" && featureName != \"SipAudioRecvInfo\" && featureName != \"SipVideoRecvInfo\" && featureName != \"ServerQos\" },featureName)"
    },
    "transformConfigs": [
      {
        "columnName": "metricName",
        "transformFunction": "mapPathString(message,'metricName','')"
      },
      {
        "columnName": "featureName",
        "transformFunction": "mapPathString(message,'featureName','')"
      },
      {
        "columnName": "failReason",
        "transformFunction": "mapPathString(message,'values.FailReason','')"
      },
      {
        "columnName": "ReceiveJitter",
        "transformFunction": "mapPathLong(message,'values.ReceiveJitter',0)"
      },
      {
        "columnName": "ReceiveLostRatio",
        "transformFunction": "mapPathLong(message,'values.ReceiveLostRatio',0)"
      },
      {
        "columnName": "confID",
        "transformFunction": "mapPathString(message,'ConfId','')"
      },
      {
        "columnName": "componentType",
        "transformFunction": "mapPathString(message,'componentType','')"
      },
      {
        "columnName": "componentAddress",
        "transformFunction": "mapPathString(message,'componentAddress','')"
      },
      {
        "columnName": "componentVer",
        "transformFunction": "mapPathString(message,'componentVer','')"
      },
      {
        "columnName": "CascadeType",
        "transformFunction": "mapPathString(message,'CascadeType','')"
      },
      {
        "columnName": "DstIP",
        "transformFunction": "mapPathString(message,'DstIP','')"
      },
      {
        "columnName": "LocalIP",
        "transformFunction": "mapPathString(message,'LocalIP','')"
      },
      {
        "columnName": "dstIp",
        "transformFunction": "mapPathString(message,'dstIp','')"
      },
      {
        "columnName": "localIp",
        "transformFunction": "mapPathString(message,'localIp','')"
      },
      {
        "columnName": "direct",
        "transformFunction": "mapPathString(message,'direct','')"
      },
      {
        "columnName": "conndesc",
        "transformFunction": "mapPathString(message,'conndesc','')"
      },
      {
        "columnName": "Jitter",
        "transformFunction": "mapPathString(message,'values.Jitter','[0]')"
      },
      {
        "columnName": "Loss",
        "transformFunction": "mapPathString(message,'values.Loss','[0]')"
      },
      {
        "columnName": "Rtt",
        "transformFunction": "mapPathString(message,'values.Rtt','[0]')"
      },
      {
        "columnName": "JitterMax",
        "transformFunction": "Groovy({Jitter.replaceAll(\"(\\\\[|\\\\])\", \"\").split(\",\").collect{Long.valueOf(it)}.max()},Jitter)"
      },
      {
        "columnName": "LossMax",
        "transformFunction": "Groovy({Loss.replaceAll(\"(\\\\[|\\\\])\", \"\").split(\",\").collect{Long.valueOf(it)}.max()},Loss)"
      },
      {
        "columnName": "RttMax",
        "transformFunction": "Groovy({Rtt.replaceAll(\"(\\\\[|\\\\])\", \"\").split(\",\").collect{Long.valueOf(it)}.max()},Rtt)"
      },
      {
        "columnName": "tsrTemp",
        "transformFunction": "mapPathString(message,'timestamp','')"
      },
      {
        "columnName": "ts",
        "transformFunction": "fromDateTime(reportTime, 'yyyy-MM-dd''T''HH:mm:ss''Z' )"
      },
      {
        "columnName": "ints",
        "transformFunction": "Groovy({System.currentTimeMillis()})"
      },
      {
        "columnName": "reportHour",
        "transformFunction": "toDateTime(ts, 'yyyy-MM-dd HH')"
      },
      {
        "columnName": "reportDay",
        "transformFunction": "toDateTime(ts, 'yyyy-MM-dd')"
      },
      {
        "columnName": "reportTime",
        "transformFunction": "Groovy({(tsr =~  /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/).find()==true ? tsr : tsr.substring(0,tsr.length()-5)+\"Z\"},tsr)"
      },
      {
        "columnName": "tsr",
        "transformFunction": "Groovy({(tsrTemp=~  /.*T.*Z/).find()==true ? tsrTemp: \"1990-01-01T00:00:00Z\"},tsrTemp)"
      }
    ]
  },
  "isDimTable": false
}